{"openapi":"3.0.1","info":{"title":"Teku","description":"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.","license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"v0.12.14-dev-00af3b87"},"paths":{"/eth/v1/beacon/headers/{block_id}":{"get":{"tags":["Beacon V1"],"summary":"Get block header","description":"Retrieves block header for given block id.","operationId":"getEthV1BeaconHeadersWithBlock_id","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockHeaderResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/headers":{"get":{"tags":["Beacon V1"],"summary":"Get block headers","description":"Retrieves block headers matching given query. By default it will fetch current head slot blocks.","operationId":"getEthV1BeaconHeaders","parameters":[{"name":"slot","in":"query","schema":{"type":"string","exampleSetFlag":false}},{"name":"parent_root","in":"query","description":"Not currently supported.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockHeadersResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/blocks/{block_id}":{"get":{"tags":["Beacon V1"],"summary":"Get block","description":"Retrieves block details for given block id.","operationId":"getEthV1BeaconBlocksWithBlock_id","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/blocks/{block_id}/root":{"get":{"tags":["Beacon V1"],"summary":"Get block root","description":"Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader","operationId":"getEthV1BeaconBlocksWithBlock_idRoot","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockRootResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/blocks/{block_id}/attestations":{"get":{"tags":["Beacon V1"],"summary":"Get block attestations","description":"Retrieves attestations included in requested block.","operationId":"getEthV1BeaconBlocksWithBlock_idAttestations","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockAttestationsResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/genesis":{"get":{"tags":["Beacon V1","Validator Required Api"],"summary":"Get chain genesis details","description":"Retrieve details of the chain's genesis which can be used to identify chain.","operationId":"getEthV1BeaconGenesis","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetGenesisResponse","exampleSetFlag":false}}}},"404":{"description":"Chain genesis info is not yet known"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/root":{"get":{"tags":["Beacon V1"],"summary":"Get state root","description":"Calculates HashTreeRoot for state with given 'state_id'. If stateId is root, same value will be returned.","operationId":"getEthV1BeaconStatesWithState_idRoot","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateRootResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/fork":{"get":{"tags":["Beacon V1","Validator Required Api"],"summary":"Get state fork","description":"Returns Fork object for state with given 'state_id'.","operationId":"getEthV1BeaconStatesWithState_idFork","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateForkResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/finality_checkpoints":{"get":{"tags":["Beacon V1"],"summary":"Get state finality checkpoints","description":"Returns finality checkpoints for state with given 'state_id'. In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.","operationId":"getEthV1BeaconStatesWithState_idFinality_checkpoints","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateRootResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/validators/{validator_id}":{"get":{"tags":["Beacon V1","Validator Required Api"],"summary":"Get validator from state","description":"Returns validator specified by state and id or public key along with status and balance.","operationId":"getEthV1BeaconStatesWithState_idValidatorsWithValidator_id","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"validator_id","in":"path","description":"Either hex encoded public key (with 0x prefix) or validator index","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/beacon/states/{state_id}/validators":{"get":{"tags":["Beacon V1"],"summary":"Get validators from state","description":"Returns filterable list of validators with their balance, status and index.","operationId":"getEthV1BeaconStatesWithState_idValidators","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"id","in":"query","description":"Either hex encoded public key (with 0x prefix) or validator index","schema":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}},{"name":"status","in":"query","description":"valid values:   pending_initialized,   pending_queued,   active_ongoing,   active_exiting,   active_slashed,   exited_unslashed,   exited_slashed,   withdrawal_possible,   withdrawal_done","schema":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorsResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"404":{"description":"Not Found"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/beacon/states/{state_id}/validator_balances":{"get":{"tags":["Beacon V1"],"summary":"Get validator balances from state","description":"Returns filterable list of validator balances.","operationId":"getEthV1BeaconStatesWithState_idValidator_balances","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"id","in":"query","description":"Either hex encoded public key (with 0x prefix) or validator index","schema":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateRootResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/committees":{"get":{"tags":["Beacon V1"],"summary":"Get committees at state","description":"Retrieves the committees for the given state.","operationId":"getEthV1BeaconStatesWithState_idCommittees","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"epoch","in":"query","description":"`uint64` Epoch number to query.","schema":{"type":"string","exampleSetFlag":false}},{"name":"index","in":"query","description":"`uint64` Committee index to query.","schema":{"type":"string","exampleSetFlag":false}},{"name":"slot","in":"query","description":"`UInt64` Slot to query in the canonical chain.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateCommitteesResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/blocks":{"post":{"tags":["Beacon V1","Validator Required Api"],"summary":"Publish a signed block","description":"Submit a signed beacon block to the beacon node to be imported. The beacon node performs the required validation.","operationId":"postEthV1BeaconBlocks","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedBeaconBlock","exampleSetFlag":false}}}},"responses":{"200":{"description":"Block has been successfully broadcast, validated and imported."},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported."},"400":{"description":"Unable to parse request body."},"500":{"description":"Beacon node experienced an internal error."},"503":{"description":"Beacon node is currently syncing."}}}},"/eth/v1/beacon/pool/attestations":{"get":{"tags":["Beacon V1"],"summary":"Get attestations","description":"Retrieves attestations known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolAttestations","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttestationsResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"}}},"post":{"tags":["Beacon V1","Validator Required Api"],"summary":"Submit a signed attestation","description":"Submit a signed attestation to the beacon node to be validated and submitted if valid.\n\nThis endpoint does not protected against slashing.","operationId":"postEthV1BeaconPoolAttestations","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}}}},"responses":{"200":{"description":"The Attestation was accepted, validated, and submitted"},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/attester_slashings":{"get":{"tags":["Beacon V1"],"summary":"Get AttesterSlashings","description":"Retrieves attester slashings known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolAttester_slashings","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttesterSlashingsResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/proposer_slashings":{"get":{"tags":["Beacon V1"],"summary":"Get proposer slashings","description":"Retrieves proposer slashings known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolProposer_slashings","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProposerSlashingsResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/voluntary_exits":{"get":{"tags":["Beacon V1"],"summary":"Get signed voluntary exits","description":"Retrieves voluntary exits known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolVoluntary_exits","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetVoluntaryExitsResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/events":{"get":{"tags":["Events","Validator Required Api"],"summary":"Subscribe to node events","description":"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface) implementation to listen on those events.","operationId":"getEthV1Events","parameters":[{"name":"topics","in":"query","description":"Event types to subscribe to.Available values: [`head`, `finalized_checkpoint`, `chain_reorg`, block, attestation, voluntary_exit]\n\nEvents that are currently not reporting: [block, attestation, voluntary_exit]","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"text/event-stream":{"schema":{"type":"string","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"}}}},"/eth/v1/node/health":{"get":{"tags":["Node V1"],"summary":"Get node health","description":"Returns node health status in http status codes. Useful for load balancers.","operationId":"getEthV1NodeHealth","responses":{"200":{"description":"Node is ready"},"206":{"description":"Node is syncing but can serve incomplete data"},"503":{"description":"Node not initialized or having issues"}}}},"/eth/v1/node/identity":{"get":{"tags":["Node V1"],"summary":"Get node identity","description":"Retrieves data about the node's network presence.","operationId":"getEthV1NodeIdentity","responses":{"200":{"description":"The identifying information of the node.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/peers":{"get":{"tags":["Node V1"],"summary":"Get node peers","description":"Retrieves data about the node's network peers.","operationId":"getEthV1NodePeers","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PeersResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/peers/{peer_id}":{"get":{"tags":["Node V1"],"summary":"Get node peer","description":"Retrieves data about the given peer.","operationId":"getEthV1NodePeersWithPeer_id","parameters":[{"name":"peer_id","in":"path","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PeerResponse","exampleSetFlag":false}}}},"404":{"description":"Peer not found"},"500":{"description":"Server Error"}}}},"/eth/v1/node/syncing":{"get":{"tags":["Node V1","Validator Required Api"],"summary":"Get node syncing status","description":"Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.","operationId":"getEthV1NodeSyncing","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncingResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/version":{"get":{"tags":["Node V1"],"summary":"Get node version","description":"similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).","operationId":"getEthV1NodeVersion","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VersionResponse","exampleSetFlag":false}}}}}}},"/eth/v1/validator/duties/attester/{epoch}":{"get":{"tags":["Validator V1","Validator Required Api"],"summary":"Get attester duties","description":"Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch. Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor chain reorganizations events.\n\nDEPRECATED, use POST endpoint, as it is able to cater for larger request sizes.","operationId":"getEthV1ValidatorDutiesAttesterWithEpoch","parameters":[{"name":"epoch","in":"path","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"index","in":"query","description":"Validator indexes. Allows comma separated values per field.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttesterDutiesResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}},"deprecated":true},"post":{"tags":["Validator V1","Validator Required Api"],"summary":"Get attester duties","description":"Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch. Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor chain reorganizations events.","operationId":"postEthV1ValidatorDutiesAttesterWithEpoch","parameters":[{"name":"epoch","in":"path","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"requestBody":{"description":"An array of the validator indices for which to obtain the duties.\n\n```\n[\n  \"(uint64)\",\n  ...\n]\n```\n\n","content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttesterDutiesResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/aggregate_and_proofs":{"post":{"tags":["Validator V1","Validator Required Api"],"summary":"Publish aggregate and proofs","description":"Verifies given aggregate and proofs and publishes it on appropriate gossipsub topic.","operationId":"postEthV1ValidatorAggregate_and_proofs","requestBody":{"content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/SignedAggregateAndProof","exampleSetFlag":false}}}}},"responses":{"200":{"description":"Successfully published aggregate."},"400":{"description":"Invalid parameter supplied."},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/beacon_committee_subscriptions":{"post":{"tags":["Validator V1","Validator Required Api"],"summary":"Subscribe to a committee subnet","description":"After Beacon node receives this request, search using discv5 for peers related to this subnet and replace current peers with those ones if necessary If validator is_aggregator, beacon node must:\n- announce subnet topic subscription on gossipsub\n- aggregate attestations received on that subnet\n","operationId":"postEthV1ValidatorBeacon_committee_subscriptions","requestBody":{"content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/BeaconCommitteeSubscriptionRequest","exampleSetFlag":false}}}}},"responses":{"200":{"description":"Slot signature is valid and beacon node has prepared the attestation subnet. Note that, there is no guarantee the node will find peers for the subnet"},"400":{"description":"Invalid request syntax."},"500":{"description":"Beacon node internal error."},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/duties/proposer/{epoch}":{"get":{"tags":["Validator V1","Validator Required Api"],"summary":"Get proposer duties","description":"Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.","operationId":"getEthV1ValidatorDutiesProposerWithEpoch","parameters":[{"name":"epoch","in":"path","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProposerDutiesResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/blocks/{slot}":{"get":{"tags":["Validator V1","Validator Required Api"],"summary":"Produce unsigned block","description":"Requests a beacon node to produce a valid block, which can then be signed by a validator.","operationId":"getEthV1ValidatorBlocksWithSlot","parameters":[{"name":"slot","in":"path","description":"The slot for which the block should be proposed.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"randao_reveal","in":"query","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"graffiti","in":"query","description":"`Bytes32 Hex` Graffiti.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetNewBlockResponse","exampleSetFlag":false}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/attestation_data":{"get":{"tags":["Validator V1","Validator Required Api"],"summary":"Produce an AttestationData","description":"Returns attestation data for the block at the specified non-finalized slot.\n\nThis endpoint is not protected against slashing. Signing the returned attestation data can result in a slashable offence.","operationId":"getEthV1ValidatorAttestation_data","parameters":[{"name":"slot","in":"query","description":"`uint64` The slot for which an attestation data should be created.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"committee_index","in":"query","description":"`Integer` The committee index for which an attestation data should be created.","required":true,"schema":{"type":"integer","format":"int32","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttestationDataResponse","exampleSetFlag":false}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/aggregate_attestation":{"get":{"tags":["Validator V1","Validator Required Api"],"summary":"Get aggregated attestations","description":"Aggregates all attestations matching given attestation data root and slot.","operationId":"getEthV1ValidatorAggregate_attestation","parameters":[{"name":"attestation_data_root","in":"query","description":"`String` HashTreeRoot of AttestationData that validator wants aggregated.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"slot","in":"query","description":"`uint64` Non-finalized slot for which to create the aggregation.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"Returns aggregated `Attestation` object with same `AttestationData` root.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAggregatedAttestationResponse","exampleSetFlag":false}}}},"400":{"description":"Invalid parameter supplied"},"403":{"description":"Beacon node was not assigned to aggregate on that subnet"},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/config/fork_schedule":{"get":{"tags":["Config"],"summary":"Get scheduled forks","description":"Retrieve all scheduled upcoming forks this node is aware of.","operationId":"getEthV1ConfigFork_schedule","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetForkScheduleResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/config/spec":{"get":{"tags":["Config","Validator Required Api"],"summary":"Get spec params","description":"Retrieve specification configuration used on this node.","operationId":"getEthV1ConfigSpec","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSpecResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/config/deposit_contract":{"get":{"tags":["Config"],"summary":"Get deposit contract address","description":"Retrieve deposit contract address and genesis fork version.","operationId":"getEthV1ConfigDeposit_contract","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositContractResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/eth/v1/debug/beacon/states/{state_id}":{"get":{"tags":["Debug"],"summary":"Get state","description":"Returns full BeaconState object for given state_id.","operationId":"getEthV1DebugBeaconStatesWithState_id","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateResponse","exampleSetFlag":false}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/debug/beacon/heads":{"get":{"tags":["Debug"],"summary":"Get fork choice leaves","description":"Retrieves all possible chain heads (leaves of fork choice tree).","operationId":"getEthV1DebugBeaconHeads","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetChainHeadsResponse","exampleSetFlag":false}}}},"500":{"description":"Server Error"}}}},"/admin/log_level":{"put":{"tags":["Admin"],"summary":"Changes the log level without restarting.","description":"Changes the log level without restarting. You can change the log level for all logs, or the log level for specific packages or classes.","operationId":"putAdminLog_level","requestBody":{"description":"```\n{\n  \"level\": (String; acceptable values: ALL, TRACE, DEBUG, INFO, ERROR, FATAL, OFF ),\n  \"log_filter\": [(String; Optional)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogLevel","exampleSetFlag":false}}}},"responses":{"204":{"description":"The LogLevel was accepted and applied"},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}}}},"/beacon/block":{"get":{"tags":["Beacon"],"summary":"Get the beacon chain block matching the criteria.","description":"Returns the beacon chain block that matches the specified epoch, slot, or block root.\nDeprecated - use `/eth/v1/beacon/blocks/{block_id}` instead.","operationId":"getBeaconBlock","parameters":[{"name":"epoch","in":"query","description":"`uint64` Epoch number to query.","schema":{"type":"string","exampleSetFlag":false}},{"name":"slot","in":"query","description":"`UInt64` Slot to query in the canonical chain.","schema":{"type":"string","exampleSetFlag":false}},{"name":"root","in":"query","description":"`Bytes32 Hex` Block root to query.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockResponse","exampleSetFlag":false}}}},"400":{"description":"Invalid parameter supplied"},"404":{"description":"Specified block not found"}},"deprecated":true}},"/beacon/chainhead":{"get":{"tags":["Beacon"],"summary":"Get information about the chain head.","description":"Returns information about the head of the beacon chain including the finalized and justified information.\nDeprecated - use `/eth/v1/beacon/states/{state_id}/finality_checkpoints` and `/eth/v1/beacon/headers/{block_id}` instead.","operationId":"getBeaconChainhead","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconChainHead","exampleSetFlag":false}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/beacon/head":{"get":{"tags":["Beacon"],"summary":"Get information about the chain head.","description":"Returns information about the head of the beacon chain from the node’s perspective.\n\nTo retrieve finalized and justified information, use /beacon/chainhead instead.\nDeprecated - use `/eth/v1/beacon/headers` instead.","operationId":"getBeaconHead","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconHead","exampleSetFlag":false}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/beacon/committees":{"get":{"tags":["Beacon"],"summary":"Get the committee assignments for an epoch.","description":"Returns committee assignments for each slot in a specified epoch.\nDeprecated - use `/eth/v1/beacon/states/{state_id}/committees/{epoch}` instead.","operationId":"getBeaconCommittees","parameters":[{"name":"epoch","in":"query","description":"`uint64` Epoch number to query.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Committee","exampleSetFlag":false}}}}},"400":{"description":"Missing a query parameter"},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/beacon/state":{"get":{"tags":["Beacon"],"summary":"Get the beacon chain state matching the criteria.\nDeprecated - use `/eth/v1/debug/states/{state_id}` instead.","description":"Returns the beacon chain state that matches the specified slot or root.","operationId":"getBeaconState","parameters":[{"name":"root","in":"query","description":"`Bytes32 Hex` Block root to query.","schema":{"type":"string","exampleSetFlag":false}},{"name":"slot","in":"query","description":"`UInt64` Slot to query in the canonical chain.","schema":{"type":"string","exampleSetFlag":false}},{"name":"stateRoot","in":"query","description":"`Bytes32 Hex` Block root to query.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconState","exampleSetFlag":false}}}},"404":{"description":"The beacon state matching the supplied query parameter was not found."},"400":{"description":"Missing a query parameter"},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/beacon/state_root":{"get":{"tags":["Beacon"],"summary":"Get the beacon chain state root for the specified slot.\nDeprecated - use `/eth/v1/beacon/states/{state_id}/root` instead.","description":"Returns the beacon chain state root for the specified slot.","operationId":"getBeaconState_root","parameters":[{"name":"slot","in":"query","description":"`UInt64` Slot to query in the canonical chain.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"The beacon chain `state_root`(`Bytes32`) for the specified slot.","content":{"text/plain":{"schema":{"type":"string","exampleSetFlag":false}}}},"404":{"description":"The beacon state root matching the supplied parameter was not found."},"400":{"description":"Missing a query parameter."},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/beacon/validators":{"get":{"tags":["Beacon"],"summary":"Get validators matching the specified query.","description":"Returns validator information.\n\nReturns the first page of validators in the current epoch if you do not specify any parameters.\nDeprecated - use `/eth/v1/beacon/states/{state_id}/validators` instead.","operationId":"getBeaconValidators","parameters":[{"name":"epoch","in":"query","description":"`uint64` Epoch number to query. Defaults to the current epoch.","schema":{"type":"string","exampleSetFlag":false}},{"name":"active","in":"query","description":"Only return validators that are active in the specified `epoch`. By default, returns inactive and active validators.\n\n**Note**: The field accepts any value to return active validators.","schema":{"type":"string","exampleSetFlag":false}},{"name":"pageSize","in":"query","description":"`Integer` The amount of results to return per page. Defaults to 250 results.","schema":{"type":"integer","format":"int32","exampleSetFlag":false}},{"name":"pageToken","in":"query","description":"`Integer` Page number to return. Defaults to page 0.","schema":{"type":"integer","format":"int32","exampleSetFlag":false}}],"responses":{"200":{"description":"List of validator objects.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconValidators","exampleSetFlag":false}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true},"post":{"tags":["Beacon"],"summary":"Get validators matching specified public keys.","description":"Returns information about validators that match the list of validator public keys and optional epoch.\n\nIf no epoch is specified, the validators are queried from the current state.\n\nPublic keys that do not match a validator are returned without validator information.\nDeprecated - use `/eth/v1/beacon/states/{state_id}/validators/{validator_id}` instead.","operationId":"postBeaconValidators","requestBody":{"description":"```\n{\n  \"epoch\": (uint64),\n  \"pubkeys\": [(Bytes48 as Hex String)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidatorsRequest","exampleSetFlag":false}}}},"responses":{"200":{"description":"List of validator objects.","content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ValidatorWithIndex","exampleSetFlag":false}}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"400":{"description":"Invalid body supplied"},"500":{"description":"Server Error"}},"deprecated":true}},"/network/enr":{"get":{"tags":["Network"],"summary":"Get the listening ENR address of the node.","description":"Returns the beacon node's listening Ethereum Node Record (ENR) address. Replaced by standard api endpoint `/eth/v1/node/identity`.","operationId":"getNetworkEnr","responses":{"200":{"description":"Base64-encoded ENR or an empty string if Node Discovery Protocol v5 is not used.","content":{"text/plain":{"schema":{"type":"string","exampleSetFlag":false}}}}},"deprecated":true}},"/network/listen_addresses":{"get":{"tags":["Network"],"summary":"Get the addresses the client's libp2p service is listening on.","description":"Returns the list of addresses that the client's libp2p service is listening on. Replaced by standard api endpoint `/eth/v1/node/identity`.","operationId":"getNetworkListen_addresses","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/network/peer_id":{"get":{"tags":["Network"],"summary":"Get the node PeerId.","description":"Returns the beacon node's base58-encoded PeerId. Replaced by standard api endpoint `/eth/v1/node/identity`.","operationId":"getNetworkPeer_id","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"string","exampleSetFlag":false}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/network/peers":{"get":{"tags":["Network"],"summary":"Get the PeerIds of connected peers.","description":"Returns the base58-encoded PeerId of each peer connected to the beacon node. Replaced by standard api endpoint `/eth/v1/node/peers`.","operationId":"getNetworkPeers","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/network/peer_count":{"get":{"tags":["Network"],"summary":"Get the number of connected peers.","description":"Returns the number of peers connected to the beacon node. Replaced by standard api endpoint `/eth/v1/node/peers`.","operationId":"getNetworkPeer_count","responses":{"200":{"description":"Number of peers connected to the beacon node.","content":{"application/json":{"schema":{"type":"integer","format":"int64","exampleSetFlag":false}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/network/listen_port":{"get":{"tags":["Network"],"summary":"Get the TCP listening port of the client's libp2p service.","description":"Returns the TCP listening port of the client's libp2p service. Replaced by standard api endpoint `/eth/v1/node/identity`.","operationId":"getNetworkListen_port","responses":{"200":{"description":"Client's TCP listening port.","content":{"application/json":{"schema":{"type":"integer","format":"int32","exampleSetFlag":false}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/node/fork":{"get":{"tags":["Node"],"summary":"Get the fork of the current head.","description":"Returns information about the fork of the beacon chain head from the node’s perspective.Replaced by standard api endpoint `/eth/v1/beacon/states/{state_id}/fork`.","operationId":"getNodeFork","responses":{"200":{"description":"An object containing the fork of the current head.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Fork","exampleSetFlag":false}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/node/genesis_time":{"get":{"tags":["Node"],"summary":"Get genesis time.","description":"Returns the genesis time from the beacon node. Replaced by standard api endpoint `/eth/v1/beacon/genesis`.","operationId":"getNodeGenesis_time","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"string","exampleSetFlag":false}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}},"deprecated":true}},"/node/syncing":{"get":{"tags":["Node"],"summary":"Get synchronization status.","description":"Returns an object with data about the synchronization status, or false if not synchronizing. Replaced by standard api endpoint `/eth/v1/node/syncing`.","operationId":"getNodeSyncing","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncingStatus","exampleSetFlag":false}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/node/version":{"get":{"tags":["Node"],"summary":"Get client version.","description":"Returns the client version. Replaced by standard api endpoint `/eth/v1/node/version`.","operationId":"getNodeVersion","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"string","exampleSetFlag":false}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/node/pending_attestation_count":{"get":{"tags":["Network"],"summary":"Get the number of attestations in the pool.","description":"Returns the number of pending attestations in the current pool.\nDeprecated - use `/eth/v1/beacon/pool/attestations` instead.","operationId":"getNodePending_attestation_count","responses":{"200":{"description":"Number of pending attestations in the pool.","content":{"application/json":{"schema":{"type":"integer","format":"int64","exampleSetFlag":false}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/validator/attestation":{"get":{"tags":["Validator"],"summary":"Get an unsigned attestation for a slot from the current state.","description":"Returns an unsigned attestation for the block at the specified non-finalized slot.\n\nThis endpoint is not protected against slashing. Signing the returned attestation can result in a slashable offence.\nDeprecated - use `/eth/v1/validator/attestation_data` instead.","operationId":"getValidatorAttestation","parameters":[{"name":"slot","in":"query","description":"`uint64` Non-finalized slot for which to create the attestation.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"committee_index","in":"query","description":"`Integer` Index of the committee making the attestation.","required":true,"schema":{"type":"integer","format":"int32","exampleSetFlag":false}}],"responses":{"200":{"description":"Returns an attestation object with a blank signature. The `signature` field should be replaced by a valid signature.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}}}},"400":{"description":"Invalid parameter supplied"},"404":{"description":"An attestation could not be created for the specified slot."}},"deprecated":true},"post":{"tags":["Validator"],"summary":"Submit a signed attestation","description":"Submit a signed attestation to the beacon node to be validated and submitted if valid.\n\nThis endpoint does not protected against slashing. Signing the attestation can result in a slashable offence.\n\nDeprecated - use `/eth/v1/beacon/pool/attestations` instead.","operationId":"postValidatorAttestation","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}}}},"responses":{"204":{"description":"The Attestation was accepted, validated, and submitted"},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}},"deprecated":true}},"/validator/block":{"get":{"tags":["Validator"],"summary":"Produce Unsigned Block","description":"Create and return an unsigned beacon block at the specified slot.\n\nDeprecated - use `/eth/v1/validator/blocks/{slot}` instead.","operationId":"getValidatorBlock","parameters":[{"name":"slot","in":"query","description":"`uint64` Slot in which to create the beacon block.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"randao_reveal","in":"query","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"graffiti","in":"query","description":"`Bytes32 Hex` Graffiti.","schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"`BeaconBlock` object for the specified slot.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconBlock","exampleSetFlag":false}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"400":{"description":"Invalid parameter supplied"}},"deprecated":true},"post":{"tags":["Validator"],"summary":"Submit a signed transaction to be imported.","description":"Submit a signed beacon block to the beacon node to be imported. The beacon node performs the required validation.\n\nDeprecated - use `/eth/v1/beacon/blocks` instead","operationId":"postValidatorBlock","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedBeaconBlock","exampleSetFlag":false}}}},"responses":{"200":{"description":"Block has been successfully broadcast, validated and imported."},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported."},"400":{"description":"Unable to parse request body."},"500":{"description":"Beacon node experienced an internal error."},"503":{"description":"Beacon node is currently syncing."}},"deprecated":true}},"/validator/aggregate_attestation":{"get":{"tags":["Validator"],"summary":"Get aggregated attestations","description":"Aggregates all attestations matching given attestation data root and slot.\n\nDeprecated - use `/eth/v1/validator/aggregate_attestation` instead.","operationId":"getValidatorAggregate_attestation","parameters":[{"name":"attestation_data_root","in":"query","description":"`String` HashTreeRoot of AttestationData that validator wants aggregated.","required":true,"schema":{"type":"string","exampleSetFlag":false}},{"name":"slot","in":"query","description":"`uint64` Non-finalized slot for which to create the aggregation.","required":true,"schema":{"type":"string","exampleSetFlag":false}}],"responses":{"200":{"description":"Returns aggregated `Attestation` object with same `AttestationData` root.","content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}}}}},"400":{"description":"Invalid parameter supplied"},"403":{"description":"Beacon node was not assigned to aggregate on that subnet"},"500":{"description":"Beacon node internal error."}},"deprecated":true}},"/validator/duties":{"post":{"tags":["Validator"],"summary":"Get the validator duties for the specified epoch.","description":"Returns the validator duties for validators that match the specified public keys and epoch.\n\nPublic keys that do not match a validator are returned without validator information.\nDeprecated - use`/eth/v1/validator/duties/attester/{epoch}` and `/eth/v1/validator/duties/proposer/{epoch}` instead.","operationId":"postValidatorDuties","requestBody":{"description":"```\n{\n  \"epoch\": (uint64),\n  \"pubkeys\": [(Bytes48 as Hex String)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidatorsRequest","exampleSetFlag":false}}}},"responses":{"200":{"description":"List of validators, including information about a validator's attestation committee index and block proposal slot.","content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ValidatorDuties","exampleSetFlag":false}}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}},"deprecated":true}},"/validator/aggregate_and_proofs":{"post":{"tags":["Validator"],"summary":"Verifies given aggregate and proof and publishes it on appropriate gossipsub topic.","description":"Aggregates all attestations matching given attestation data root and slot.\nDeprecated - use `/eth/v1/validator/aggregate_and_proofs` instead.","operationId":"postValidatorAggregate_and_proofs","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedAggregateAndProof","exampleSetFlag":false}}}},"responses":{"200":{"description":"Successfully processed attestation."},"400":{"description":"Invalid parameter supplied."},"500":{"description":"Beacon node internal error."}},"deprecated":true}},"/validator/beacon_committee_subscription":{"post":{"tags":["Validator"],"summary":"Subscribe beacon node to committee attestation subnet.","description":"After Beacon node receives this request it has to:\n- add subnet to ENR\n- announce subnet topic subscription on gossipsub\n- search using discv5 for peers related to this subnet and replace current peers with those ones if necessary\n- aggregate attestations received on that subnet\nDeprecated - use `/eth/v1/validator/beacon_committee_subscriptions` instead.","operationId":"postValidatorBeacon_committee_subscription","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SubscribeToBeaconCommitteeRequest","exampleSetFlag":false}}}},"responses":{"200":{"description":"Slot signature is valid and beacon node is subscribed to given committee attestation subnet."},"400":{"description":"Invalid request syntax."},"500":{"description":"Beacon node internal error."}},"deprecated":true}},"/validator/persistent_subnets_subscription":{"post":{"tags":["Validator"],"summary":"Subscribe beacon node persistently to a list of subnets.","description":"Deprecated - Persistent subnets are automatically managed based on requests to `/eth/v1/validator/beacon_committee_subscriptions`.","operationId":"postValidatorPersistent_subnets_subscription","requestBody":{"content":{"application/json":{"schema":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/SubnetSubscription","exampleSetFlag":false}}}}},"responses":{"200":{"description":"Subscribed to subnets."},"400":{"description":"Invalid request syntax."},"500":{"description":"Beacon node internal error."}},"deprecated":true}}},"components":{"schemas":{"BeaconBlockHeader":{"type":"object","properties":{"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"proposer_index":{"type":"string","format":"uint64","exampleSetFlag":false},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"body_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"BlockHeader":{"type":"object","properties":{"root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","exampleSetFlag":true},"canonical":{"type":"boolean","exampleSetFlag":false},"header":{"$ref":"#/components/schemas/SignedBeaconBlockHeader","exampleSetFlag":false}},"exampleSetFlag":false},"GetBlockHeaderResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/BlockHeader","exampleSetFlag":false}},"exampleSetFlag":false},"SignedBeaconBlockHeader":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlockHeader","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"GetBlockHeadersResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/BlockHeader","exampleSetFlag":false}}},"exampleSetFlag":false},"Attestation":{"type":"object","properties":{"aggregation_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte","exampleSetFlag":false},"data":{"$ref":"#/components/schemas/AttestationData","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"AttestationData":{"type":"object","properties":{"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"index":{"type":"string","format":"uint64","exampleSetFlag":false},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"source":{"$ref":"#/components/schemas/Checkpoint","exampleSetFlag":false},"target":{"$ref":"#/components/schemas/Checkpoint","exampleSetFlag":false}},"exampleSetFlag":false},"AttesterSlashing":{"type":"object","properties":{"attestation_1":{"$ref":"#/components/schemas/IndexedAttestation","exampleSetFlag":false},"attestation_2":{"$ref":"#/components/schemas/IndexedAttestation","exampleSetFlag":false}},"exampleSetFlag":false},"BeaconBlock":{"type":"object","properties":{"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"proposer_index":{"type":"string","format":"uint64","exampleSetFlag":false},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"body":{"$ref":"#/components/schemas/BeaconBlockBody","exampleSetFlag":false}},"exampleSetFlag":false},"BeaconBlockBody":{"type":"object","properties":{"randao_reveal":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false},"eth1_data":{"$ref":"#/components/schemas/Eth1Data","exampleSetFlag":false},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"proposer_slashings":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ProposerSlashing","exampleSetFlag":false}},"attester_slashings":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/AttesterSlashing","exampleSetFlag":false}},"attestations":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}},"deposits":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Deposit","exampleSetFlag":false}},"voluntary_exits":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/SignedVoluntaryExit","exampleSetFlag":false}}},"exampleSetFlag":false},"Checkpoint":{"type":"object","properties":{"epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"Deposit":{"type":"object","properties":{"proof":{"type":"array","exampleSetFlag":false,"items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"data":{"$ref":"#/components/schemas/DepositData","exampleSetFlag":false}},"exampleSetFlag":false},"DepositData":{"type":"object","properties":{"pubkey":{"type":"string","description":"Bytes48 hexadecimal","format":"byte","exampleSetFlag":false},"withdrawal_credentials":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"amount":{"type":"string","format":"uint64","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"Eth1Data":{"type":"object","properties":{"deposit_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"deposit_count":{"type":"string","format":"uint64","exampleSetFlag":false},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"GetBlockResponse":{"type":"object","properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"beacon_block":{"$ref":"#/components/schemas/SignedBeaconBlock","exampleSetFlag":false}},"exampleSetFlag":false},"IndexedAttestation":{"type":"object","properties":{"attesting_indices":{"type":"array","exampleSetFlag":false,"items":{"type":"string","format":"uint64","exampleSetFlag":false}},"data":{"$ref":"#/components/schemas/AttestationData","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"ProposerSlashing":{"type":"object","properties":{"signed_header_1":{"$ref":"#/components/schemas/SignedBeaconBlockHeader","exampleSetFlag":false},"signed_header_2":{"$ref":"#/components/schemas/SignedBeaconBlockHeader","exampleSetFlag":false}},"exampleSetFlag":false},"SignedBeaconBlock":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlock","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"SignedVoluntaryExit":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/VoluntaryExit","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"VoluntaryExit":{"type":"object","properties":{"epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"validator_index":{"type":"string","format":"uint64","exampleSetFlag":false}},"exampleSetFlag":false},"GetBlockRootResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Root","exampleSetFlag":false}},"exampleSetFlag":false},"Root":{"type":"object","properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"GetBlockAttestationsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}}},"exampleSetFlag":false},"GenesisData":{"type":"object","properties":{"genesis_time":{"type":"string","description":"The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.","example":"1590832934","exampleSetFlag":true},"genesis_validators_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","exampleSetFlag":true},"genesis_fork_version":{"pattern":"^0x[a-fA-F0-9]{8}$","type":"string","example":"0x00000000","exampleSetFlag":true}},"exampleSetFlag":false},"GetGenesisResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/GenesisData","exampleSetFlag":false}},"exampleSetFlag":false},"GetStateRootResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Root","exampleSetFlag":false}},"exampleSetFlag":false},"Fork":{"type":"object","properties":{"previous_version":{"pattern":"^0x[a-fA-F0-9]{8}$","type":"string","description":"Bytes4 hexadecimal","exampleSetFlag":false},"current_version":{"pattern":"^0x[a-fA-F0-9]{8}$","type":"string","description":"Bytes4 hexadecimal","exampleSetFlag":false},"epoch":{"type":"string","exampleSetFlag":false}},"exampleSetFlag":false},"GetStateForkResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Fork","exampleSetFlag":false}},"exampleSetFlag":false},"GetStateValidatorResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/ValidatorResponse","exampleSetFlag":false}},"exampleSetFlag":false},"Validator":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"Bytes48 hexadecimal","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","exampleSetFlag":true},"withdrawal_credentials":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Root of withdrawal credentials","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","exampleSetFlag":true},"effective_balance":{"type":"string","description":"Balance at stake in Gwei.","example":"1","exampleSetFlag":true},"slashed":{"type":"boolean","exampleSetFlag":false},"activation_eligibility_epoch":{"type":"string","description":"When criteria for activation were met.","example":"1","exampleSetFlag":true},"activation_epoch":{"type":"string","description":"Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated.","example":"1","exampleSetFlag":true},"exit_epoch":{"type":"string","description":"Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.","example":"1","exampleSetFlag":true},"withdrawable_epoch":{"type":"string","description":"When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined.","example":"1","exampleSetFlag":true}},"exampleSetFlag":false},"ValidatorResponse":{"type":"object","properties":{"index":{"type":"string","description":"Index of validator in validator registry.","example":"1","exampleSetFlag":true},"balance":{"type":"string","description":"Current validator balance in gwei.","example":"1","exampleSetFlag":true},"status":{"type":"string","description":"[Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)","exampleSetFlag":false,"enum":["pending_initialized","pending_queued","active_ongoing","active_exiting","active_slashed","exited_unslashed","exited_slashed","withdrawal_possible","withdrawal_done"]},"validator":{"$ref":"#/components/schemas/Validator","exampleSetFlag":false}},"exampleSetFlag":false},"GetStateValidatorsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ValidatorResponse","exampleSetFlag":false}}},"exampleSetFlag":false},"EpochCommitteeResponse":{"type":"object","properties":{"slot":{"type":"string","description":"The slot at which the committee has to attest.","example":"1","exampleSetFlag":true},"index":{"type":"string","description":"Index of committee","example":"1","exampleSetFlag":true},"validators":{"type":"array","exampleSetFlag":false,"items":{"type":"string","example":"1","exampleSetFlag":true}}},"exampleSetFlag":false},"GetStateCommitteesResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/EpochCommitteeResponse","exampleSetFlag":false}}},"exampleSetFlag":false},"GetAttestationsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}}},"exampleSetFlag":false},"GetAttesterSlashingsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/AttesterSlashing","exampleSetFlag":false}}},"exampleSetFlag":false},"GetProposerSlashingsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ProposerSlashing","exampleSetFlag":false}}},"exampleSetFlag":false},"GetVoluntaryExitsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/SignedVoluntaryExit","exampleSetFlag":false}}},"exampleSetFlag":false},"Identity":{"type":"object","properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","exampleSetFlag":true},"enr":{"type":"string","description":"Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)","example":"enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8","exampleSetFlag":true},"p2p_addresses":{"type":"array","description":"Node's addresses on which eth2 rpc requests are served. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","exampleSetFlag":true,"items":{"type":"string","exampleSetFlag":false}},"discovery_addresses":{"type":"array","description":"Node's addresses on which is listening for discv5 requests. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","exampleSetFlag":true,"items":{"type":"string","exampleSetFlag":false}},"metadata":{"$ref":"#/components/schemas/Metadata","exampleSetFlag":false}},"exampleSetFlag":false},"IdentityResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Identity","exampleSetFlag":false}},"exampleSetFlag":false},"Metadata":{"type":"object","properties":{"seq_number":{"pattern":"^0-9+$","type":"string","description":"Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1.","exampleSetFlag":false},"attnets":{"pattern":"^0x[a-fA-F0-9]{2,}$","type":"string","description":"Bitvector representing the node's persistent attestation subnet subscriptions.","exampleSetFlag":false}},"description":"Based on eth2 [Metadata object](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/p2p-interface.md#metadata)","exampleSetFlag":false},"Peer":{"type":"object","properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. '[Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","exampleSetFlag":true},"enr":{"type":"string","description":"Ethereum node record. Not currently populated. [Read more](https://eips.ethereum.org/EIPS/eip-778)","nullable":true,"example":"example: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8","exampleSetFlag":true},"address":{"type":"string","description":"[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","exampleSetFlag":true},"state":{"type":"string","exampleSetFlag":false,"enum":["disconnected","connecting","connected","disconnecting"]},"direction":{"type":"string","exampleSetFlag":false,"enum":["inbound","outbound"]}},"exampleSetFlag":false},"PeersResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Peer","exampleSetFlag":false}}},"exampleSetFlag":false},"PeerResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Peer","exampleSetFlag":false}},"exampleSetFlag":false},"Syncing":{"type":"object","properties":{"head_slot":{"pattern":"^0-9+$","type":"string","description":"Beacon node's head slot","exampleSetFlag":false},"sync_distance":{"pattern":"^0-9+$","type":"string","description":"How many slots node needs to process to reach head. 0 if synced.","exampleSetFlag":false}},"exampleSetFlag":false},"SyncingResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Syncing","exampleSetFlag":false}},"exampleSetFlag":false},"Version":{"type":"object","properties":{"version":{"type":"string","description":"A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).","example":"teku/v0.12.6-dev-994997f8/osx-x86_64/adoptopenjdk-java-11","exampleSetFlag":true}},"exampleSetFlag":false},"VersionResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Version","exampleSetFlag":false}},"exampleSetFlag":false},"AttesterDuty":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","exampleSetFlag":true},"validator_index":{"type":"string","description":"Index of validator in validator registry","example":"1","exampleSetFlag":true},"committee_index":{"type":"string","description":"The committee index","example":"1","exampleSetFlag":true},"committee_length":{"type":"string","description":"Number of validators in committee","example":"1","exampleSetFlag":true},"committees_at_slot":{"type":"string","description":"Number of committees at the provided slot","example":"1","exampleSetFlag":true},"validator_committee_index":{"type":"string","description":"Index of validator in committee","example":"1","exampleSetFlag":true},"slot":{"type":"string","description":"The slot at which the validator must attest.","example":"1","exampleSetFlag":true}},"exampleSetFlag":false},"GetAttesterDutiesResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/AttesterDuty","exampleSetFlag":false}}},"exampleSetFlag":false},"AggregateAndProof":{"type":"object","properties":{"index":{"type":"string","format":"uint64","exampleSetFlag":false},"attestation":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false},"selection_proof":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"SignedAggregateAndProof":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/AggregateAndProof","exampleSetFlag":false},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"BeaconCommitteeSubscriptionRequest":{"type":"object","properties":{"validator_index":{"type":"integer","format":"int32","exampleSetFlag":false},"committee_index":{"type":"integer","format":"int32","exampleSetFlag":false},"committees_at_slot":{"type":"string","format":"uint64","exampleSetFlag":false},"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"is_aggregator":{"type":"boolean","exampleSetFlag":false}},"exampleSetFlag":false},"GetProposerDutiesResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ProposerDuty","exampleSetFlag":false}}},"exampleSetFlag":false},"ProposerDuty":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","exampleSetFlag":true},"validator_index":{"type":"string","description":"Index of validator in validator registry","example":"1","exampleSetFlag":true},"slot":{"type":"string","description":"The slot at which the validator must propose block.","example":"1","exampleSetFlag":true}},"exampleSetFlag":false},"GetNewBlockResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/BeaconBlock","exampleSetFlag":false}},"exampleSetFlag":false},"GetAttestationDataResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/AttestationData","exampleSetFlag":false}},"exampleSetFlag":false},"GetAggregatedAttestationResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Attestation","exampleSetFlag":false}},"exampleSetFlag":false},"GetForkScheduleResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Fork","exampleSetFlag":false}}},"exampleSetFlag":false},"GetSpecResponse":{"type":"object","properties":{"data":{"type":"object","additionalProperties":{"type":"string","exampleSetFlag":false},"exampleSetFlag":false}},"exampleSetFlag":false},"DepositContract":{"type":"object","properties":{"chain_id":{"$ref":"#/components/schemas/UInt64","exampleSetFlag":false},"address":{"type":"string","exampleSetFlag":false}},"exampleSetFlag":false},"GetDepositContractResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/DepositContract","exampleSetFlag":false}},"exampleSetFlag":false},"UInt64":{"type":"object","exampleSetFlag":false},"BeaconState":{"type":"object","properties":{"genesis_time":{"type":"string","format":"uint64","exampleSetFlag":false},"genesis_validators_root":{"$ref":"#/components/schemas/Bytes32","exampleSetFlag":false},"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"fork":{"$ref":"#/components/schemas/Fork","exampleSetFlag":false},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader","exampleSetFlag":false},"block_roots":{"type":"array","exampleSetFlag":false,"items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"state_roots":{"type":"array","exampleSetFlag":false,"items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"historical_roots":{"type":"array","exampleSetFlag":false,"items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data","exampleSetFlag":false},"eth1_data_votes":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Eth1Data","exampleSetFlag":false}},"eth1_deposit_index":{"type":"string","format":"uint64","exampleSetFlag":false},"validators":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/Validator","exampleSetFlag":false}},"balances":{"type":"array","exampleSetFlag":false,"items":{"type":"string","format":"uint64","exampleSetFlag":false}},"randao_mixes":{"type":"array","exampleSetFlag":false,"items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"slashings":{"type":"array","exampleSetFlag":false,"items":{"type":"string","format":"uint64","exampleSetFlag":false}},"previous_epoch_attestations":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/PendingAttestation","exampleSetFlag":false}},"current_epoch_attestations":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/PendingAttestation","exampleSetFlag":false}},"justification_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte","exampleSetFlag":false},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint","exampleSetFlag":false},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint","exampleSetFlag":false},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint","exampleSetFlag":false}},"exampleSetFlag":false},"Bytes32":{"type":"object","properties":{"zero":{"type":"boolean","exampleSetFlag":false},"empty":{"type":"boolean","exampleSetFlag":false}},"exampleSetFlag":false},"GetStateResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/BeaconState","exampleSetFlag":false}},"exampleSetFlag":false},"PendingAttestation":{"type":"object","properties":{"aggregation_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte","exampleSetFlag":false},"data":{"$ref":"#/components/schemas/AttestationData","exampleSetFlag":false},"inclusion_delay":{"type":"string","format":"uint64","exampleSetFlag":false},"proposer_index":{"type":"string","format":"uint64","exampleSetFlag":false}},"exampleSetFlag":false},"ChainHead":{"type":"object","properties":{"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"GetChainHeadsResponse":{"type":"object","properties":{"data":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ChainHead","exampleSetFlag":false}}},"exampleSetFlag":false},"LogLevel":{"type":"object","properties":{"level":{"type":"string","exampleSetFlag":false},"log_filter":{"type":"array","exampleSetFlag":false,"items":{"type":"string","exampleSetFlag":false}}},"exampleSetFlag":false},"BeaconChainHead":{"type":"object","properties":{"head_slot":{"type":"string","format":"uint64","exampleSetFlag":false},"head_epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"head_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"finalized_slot":{"type":"string","format":"uint64","exampleSetFlag":false},"finalized_epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"finalized_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"justified_slot":{"type":"string","format":"uint64","exampleSetFlag":false},"justified_epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"justified_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"previous_justified_slot":{"type":"string","format":"uint64","exampleSetFlag":false},"previous_justified_epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"previous_justified_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"BeaconHead":{"type":"object","properties":{"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte","exampleSetFlag":false}},"exampleSetFlag":false},"Committee":{"type":"object","properties":{"slot":{"type":"string","format":"uint64","exampleSetFlag":false},"index":{"type":"string","format":"uint64","exampleSetFlag":false},"committee":{"type":"array","exampleSetFlag":false,"items":{"type":"integer","format":"int32","exampleSetFlag":false}}},"exampleSetFlag":false},"ValidatorsRequest":{"required":["pubkeys"],"type":"object","properties":{"epoch":{"type":"string","format":"uint64","exampleSetFlag":false},"pubkeys":{"type":"array","exampleSetFlag":false,"items":{"type":"string","description":"Bytes48 hexadecimal","format":"byte","exampleSetFlag":false}}},"exampleSetFlag":false},"ValidatorWithIndex":{"type":"object","properties":{"pubkey":{"type":"string","description":"Bytes48 hexadecimal","format":"byte","exampleSetFlag":false},"validator_index":{"type":"integer","format":"int32","exampleSetFlag":false},"balance":{"type":"string","format":"uint64","exampleSetFlag":false},"validator":{"$ref":"#/components/schemas/Validator","exampleSetFlag":false}},"exampleSetFlag":false},"SyncStatus":{"type":"object","properties":{"startingSlot":{"type":"string","format":"uint64","exampleSetFlag":false},"currentSlot":{"type":"string","format":"uint64","exampleSetFlag":false},"highestSlot":{"type":"string","format":"uint64","exampleSetFlag":false}},"exampleSetFlag":false},"SyncingStatus":{"type":"object","properties":{"is_syncing":{"type":"boolean","exampleSetFlag":false},"sync_status":{"$ref":"#/components/schemas/SyncStatus","exampleSetFlag":false}},"exampleSetFlag":false},"BeaconValidators":{"type":"object","properties":{"validators":{"type":"array","exampleSetFlag":false,"items":{"$ref":"#/components/schemas/ValidatorWithIndex","exampleSetFlag":false}},"total_size":{"type":"integer","format":"int64","exampleSetFlag":false},"next_page_token":{"type":"integer","format":"int32","exampleSetFlag":false}},"exampleSetFlag":false},"ValidatorDuties":{"type":"object","properties":{"validator_pubkey":{"type":"string","description":"Bytes48 hexadecimal","format":"byte","exampleSetFlag":false},"validator_index":{"type":"integer","format":"int32","exampleSetFlag":false},"attestation_committee_index":{"type":"integer","format":"int32","exampleSetFlag":false},"attestation_committee_position":{"type":"integer","format":"int32","exampleSetFlag":false},"aggregator_modulo":{"type":"integer","format":"int32","exampleSetFlag":false},"block_proposal_slots":{"type":"array","exampleSetFlag":false,"items":{"type":"string","format":"uint64","exampleSetFlag":false}},"attestation_slot":{"type":"string","format":"uint64","exampleSetFlag":false}},"exampleSetFlag":false},"SubscribeToBeaconCommitteeRequest":{"type":"object","properties":{"committee_index":{"type":"integer","format":"int32","exampleSetFlag":false},"aggregation_slot":{"type":"string","format":"uint64","exampleSetFlag":false}},"exampleSetFlag":false},"SubnetSubscription":{"type":"object","properties":{"subnet_id":{"type":"integer","format":"int32","exampleSetFlag":false},"unsubscription_slot":{"type":"string","format":"uint64","exampleSetFlag":false}},"exampleSetFlag":false}}}}